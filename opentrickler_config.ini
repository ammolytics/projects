[general]
verbose = True


[bluetooth]
name = Trickler


[scale]
# See the SCALES variable in scales.py for options.
model = and-fx120
port = /dev/ttyUSB0
baudrate = 19200
timeout = 0.1


[motors]
trickler_pin = 18
trickler_max_pwm = 100
trickler_min_pwm = 32

# Auger Motor Drive Pins
auger_in1 = 22
auger_in2 = 23
auger_in3 = 24
auger_in4 = 25

# Auger Direction 0 = CCW, 1 = CW  
auger_dir = 0
# Auger Speed - mSec between steps, min = 3 / the higher the slower the motor spins
auger_speed = 3 
# Auger Step - The number of steps at drive intervals, 512 steps = One rotation
auger_steps = 32
# Auger Load Percent 
auger_lpct = 80
# Auger Reverse Steps - Number of steps to drive in reverse before going forward with auger
auger_rsteps = 10
# Auger Wait = Wait time between auger stop and tricker stop
auger_wait = 2000

#servo_pin = 

[leds]
# https://gpiozero.readthedocs.io/en/stable/recipes_advanced.html#controlling-the-pi-s-own-leds
status_led_pin = 47
active_high = False
enable_status_leds = True
ready_status_led_mode = pulse
running_status_led_mode = on
done_status_led_mode = fast_blink


[PID]
# Higher Kp values will:
# - decrease rise time
# - increase overshoot
# - slightly increase settling time
# - decrease steady-state error
# - degrade stability
Kp = 10
# Higher Ki values will:
# - slightly decrease rise time
# - increase overshoot
# - increase settling time
# - largely decrease steady-state error
# - degrade stability
Ki = 2.3
# Higher Kd values will:
# - slightly decrease rise time
# - decrease overshoot
# - decrease settling time
# - minorly affect steady-state error
# - improve stability
Kd = 3.75
# Enable for use with pidtuner.com
pid_tuner_mode = False
